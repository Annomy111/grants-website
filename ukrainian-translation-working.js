const { createClient } = require('@supabase/supabase-js');

// Use the same environment variable approach as the working import script
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

// Translation mappings
const translations = {
  'Black Sea Trust for Regional Cooperation Grants': '–ì—Ä–∞–Ω—Ç–∏ –ß–æ—Ä–Ω–æ–º–æ—Ä—Å—å–∫–æ–≥–æ –¢—Ä–∞—Å—Ç—É –†–µ–≥—ñ–æ–Ω–∞–ª—å–Ω–æ–≥–æ –°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏—Ü—Ç–≤–∞',
  'European Endowment for Democracy Grants': '–ì—Ä–∞–Ω—Ç–∏ –Ñ–≤—Ä–æ–ø–µ–π—Å—å–∫–æ–≥–æ –§–æ–Ω–¥—É –î–µ–º–æ–∫—Ä–∞—Ç—ñ—ó',
  'International Renaissance Foundation Grants': '–ì—Ä–∞–Ω—Ç–∏ –ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –§–æ–Ω–¥—É –í—ñ–¥—Ä–æ–¥–∂–µ–Ω–Ω—è',
  'Stefan Batory Foundation Ukraine Support': '–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –£–∫—Ä–∞—ó–Ω–∏ –≤—ñ–¥ –§–æ–Ω–¥—É –°—Ç–µ—Ñ–∞–Ω–∞ –ë–∞—Ç–æ—Ä—ñ—è',
  'Netherlands Embassy Small Grants': '–ú–∞–ª—ñ –≥—Ä–∞–Ω—Ç–∏ –ü–æ—Å–æ–ª—å—Å—Ç–≤–∞ –ù—ñ–¥–µ—Ä–ª–∞–Ω–¥—ñ–≤',
  'French Development Agency Ukraine Program': '–ü—Ä–æ–≥—Ä–∞–º–∞ –£–∫—Ä–∞—ó–Ω–∏ –§—Ä–∞–Ω—Ü—É–∑—å–∫–æ–≥–æ –ê–≥–µ–Ω—Ç—Å—Ç–≤–∞ –†–æ–∑–≤–∏—Ç–∫—É',
  'EBRD Community Initiative': '–Ü–Ω—ñ—Ü—ñ–∞—Ç–∏–≤–∞ –Ñ–ë–†–† –¥–ª—è –ì—Ä–æ–º–∞–¥',
  'Konrad Adenauer Stiftung Ukraine Grants': '–ì—Ä–∞–Ω—Ç–∏ –§–æ–Ω–¥—É –ö–æ–Ω—Ä–∞–¥–∞ –ê–¥–µ–Ω–∞—É–µ—Ä–∞ –¥–ª—è –£–∫—Ä–∞—ó–Ω–∏',
  'Friedrich Ebert Stiftung Ukraine Support': '–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –£–∫—Ä–∞—ó–Ω–∏ –≤—ñ–¥ –§–æ–Ω–¥—É –§—Ä—ñ–¥—Ä—ñ—Ö–∞ –ï–±–µ—Ä—Ç–∞',
  'Heinrich B√∂ll Foundation Ukraine Program': '–ü—Ä–æ–≥—Ä–∞–º–∞ –£–∫—Ä–∞—ó–Ω–∏ –§–æ–Ω–¥—É –ì–µ–Ω—Ä—ñ—Ö–∞ –ë—å–æ–ª–ª—è',
  'Charles Stewart Mott Foundation CEE Program': '–ü—Ä–æ–≥—Ä–∞–º–∞ –¶–°–Ñ –§–æ–Ω–¥—É –ß–∞—Ä–ª—å–∑–∞ –°—Ç—é–∞—Ä—Ç–∞ –ú–æ—Ç—Ç–∞',
  'Robert Bosch Stiftung Eastern Europe': '–§–æ–Ω–¥ –†–æ–±–µ—Ä—Ç–∞ –ë–æ—à–∞ –¥–ª—è –°—Ö—ñ–¥–Ω–æ—ó –Ñ–≤—Ä–æ–ø–∏',
  'Canada Fund for Local Initiatives Ukraine': '–ö–∞–Ω–∞–¥—Å—å–∫–∏–π —Ñ–æ–Ω–¥ –º—ñ—Å—Ü–µ–≤–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞—Ç–∏–≤ –¥–ª—è –£–∫—Ä–∞—ó–Ω–∏',
  'Japan Grassroots Grant Program': '–Ø–ø–æ–Ω—Å—å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–∞ –≥—Ä–∞–Ω—Ç—ñ–≤ –¥–ª—è –Ω–∞—Ä–æ–¥–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞—Ç–∏–≤',
  'Norwegian Helsinki Committee Ukraine Support': '–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –£–∫—Ä–∞—ó–Ω–∏ –≤—ñ–¥ –ù–æ—Ä–≤–µ–∑—å–∫–æ–≥–æ –ì–µ–ª—å—Å—ñ–Ω—Å—å–∫–æ–≥–æ –ö–æ–º—ñ—Ç–µ—Ç—É',
  'People in Need Ukraine Programs': '–ü—Ä–æ–≥—Ä–∞–º–∏ –£–∫—Ä–∞—ó–Ω–∏ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó "–õ—é–¥–∏ –≤ –ø–æ—Ç—Ä–µ–±—ñ"',
  'Caritas Ukraine Partnership Grants': '–ü–∞—Ä—Ç–Ω–µ—Ä—Å—å–∫—ñ –≥—Ä–∞–Ω—Ç–∏ –ö–∞—Ä—ñ—Ç–∞—Å –£–∫—Ä–∞—ó–Ω–∏',
  'WHO Ukraine Health Programs': '–ü—Ä–æ–≥—Ä–∞–º–∏ –æ—Ö–æ—Ä–æ–Ω–∏ –∑–¥–æ—Ä–æ–≤\'—è –í–û–û–ó –£–∫—Ä–∞—ó–Ω–∏',
  'IOM Ukraine Migration Support': '–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó –ú–û–ú –£–∫—Ä–∞—ó–Ω–∏',
  'UNICEF Ukraine Partnerships': '–ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞ –Æ–ù–Ü–°–ï–§ –£–∫—Ä–∞—ó–Ω–∏',
  'FAO Ukraine Agriculture Support': '–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —Å—ñ–ª—å—Å—å–∫–æ–≥–æ –≥–æ—Å–ø–æ–¥–∞—Ä—Å—Ç–≤–∞ –§–ê–û –£–∫—Ä–∞—ó–Ω–∏',
  'Enabel Belgium Ukraine Cooperation': '–°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏—Ü—Ç–≤–æ Enabel –ë–µ–ª—å–≥—ñ—è-–£–∫—Ä–∞—ó–Ω–∞',
  'Austrian Development Agency Ukraine Programs': '–ü—Ä–æ–≥—Ä–∞–º–∏ –£–∫—Ä–∞—ó–Ω–∏ –ê–≤—Å—Ç—Ä—ñ–π—Å—å–∫–æ–≥–æ –ê–≥–µ–Ω—Ç—Å—Ç–≤–∞ –†–æ–∑–≤–∏—Ç–∫—É',
  'Finland Support to Ukraine': '–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –§—ñ–Ω–ª—è–Ω–¥—ñ—ó –¥–ª—è –£–∫—Ä–∞—ó–Ω–∏',
  'Danish Support for Ukraine': '–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –î–∞–Ω—ñ—ó –¥–ª—è –£–∫—Ä–∞—ó–Ω–∏',
  
  // Organizations
  'German Marshall Fund (GMF) - Black Sea Trust': '–ù—ñ–º–µ—Ü—å–∫–∏–π —Ñ–æ–Ω–¥ –ú–∞—Ä—à–∞–ª–ª–∞ (GMF) - –ß–æ—Ä–Ω–æ–º–æ—Ä—Å—å–∫–∏–π —Ç—Ä–∞—Å—Ç',
  'European Endowment for Democracy (EED)': '–Ñ–≤—Ä–æ–ø–µ–π—Å—å–∫–∏–π —Ñ–æ–Ω–¥ –¥–µ–º–æ–∫—Ä–∞—Ç—ñ—ó (EED)',
  'IRF/Open Society': '–ú–§–í/–í—ñ–¥–∫—Ä–∏—Ç–µ —Å—É—Å–ø—ñ–ª—å—Å—Ç–≤–æ',
  'Stefan Batory Foundation': '–§–æ–Ω–¥ –°—Ç–µ—Ñ–∞–Ω–∞ –ë–∞—Ç–æ—Ä—ñ—è',
  'Netherlands Ministry of Foreign Affairs': '–ú—ñ–Ω—ñ—Å—Ç–µ—Ä—Å—Ç–≤–æ –∑–∞–∫–æ—Ä–¥–æ–Ω–Ω–∏—Ö —Å–ø—Ä–∞–≤ –ù—ñ–¥–µ—Ä–ª–∞–Ω–¥—ñ–≤',
  'AFD': 'AFD (–§—Ä–∞–Ω—Ü—É–∑—å–∫–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ —Ä–æ–∑–≤–∏—Ç–∫—É)',
  'European Bank for Reconstruction and Development': '–Ñ–≤—Ä–æ–ø–µ–π—Å—å–∫–∏–π –±–∞–Ω–∫ —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó —Ç–∞ —Ä–æ–∑–≤–∏—Ç–∫—É',
  'Konrad Adenauer Stiftung': '–§–æ–Ω–¥ –ö–æ–Ω—Ä–∞–¥–∞ –ê–¥–µ–Ω–∞—É–µ—Ä–∞',
  'Friedrich Ebert Stiftung': '–§–æ–Ω–¥ –§—Ä—ñ–¥—Ä—ñ—Ö–∞ –ï–±–µ—Ä—Ç–∞',
  'Heinrich B√∂ll Foundation': '–§–æ–Ω–¥ –ì–µ–Ω—Ä—ñ—Ö–∞ –ë—å–æ–ª–ª—è',
  'Charles Stewart Mott Foundation': '–§–æ–Ω–¥ –ß–∞—Ä–ª—å–∑–∞ –°—Ç—é–∞—Ä—Ç–∞ –ú–æ—Ç—Ç–∞',
  'Robert Bosch Stiftung': '–§–æ–Ω–¥ –†–æ–±–µ—Ä—Ç–∞ –ë–æ—à–∞',
  'Global Affairs Canada': '–ì–ª–æ–±–∞–ª—å–Ω—ñ —Å–ø—Ä–∞–≤–∏ –ö–∞–Ω–∞–¥–∏',
  'Embassy of Japan in Ukraine': '–ü–æ—Å–æ–ª—å—Å—Ç–≤–æ –Ø–ø–æ–Ω—ñ—ó –≤ –£–∫—Ä–∞—ó–Ω—ñ',
  'Norwegian Helsinki Committee': '–ù–æ—Ä–≤–µ–∑—å–∫–∏–π –ì–µ–ª—å—Å—ñ–Ω—Å—å–∫–∏–π –∫–æ–º—ñ—Ç–µ—Ç',
  'People in Need': '–õ—é–¥–∏ –≤ –ø–æ—Ç—Ä–µ–±—ñ',
  'Caritas Internationalis': '–ö–∞—Ä—ñ—Ç–∞—Å –Ü–Ω—Ç–µ—Ä–Ω–∞—Ü—ñ–æ–Ω–∞–ª—ñ—Å',
  'World Health Organization Ukraine': '–í—Å–µ—Å–≤—ñ—Ç–Ω—è –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è –æ—Ö–æ—Ä–æ–Ω–∏ –∑–¥–æ—Ä–æ–≤\'—è –£–∫—Ä–∞—ó–Ω–∏',
  'International Organization for Migration Ukraine': '–ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∞ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è –∑ –º—ñ–≥—Ä–∞—Ü—ñ—ó –£–∫—Ä–∞—ó–Ω–∏',
  'UNICEF Ukraine': '–Æ–ù–Ü–°–ï–§ –£–∫—Ä–∞—ó–Ω–∏',
  'Food and Agriculture Organization (FAO) Ukraine': '–ü—Ä–æ–¥–æ–≤–æ–ª—å—á–∞ —Ç–∞ —Å—ñ–ª—å—Å—å–∫–æ–≥–æ—Å–ø–æ–¥–∞—Ä—Å—å–∫–∞ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è (–§–ê–û) –£–∫—Ä–∞—ó–Ω–∏',
  'Enabel - Belgian Development Agency': 'Enabel - –ë–µ–ª—å–≥—ñ–π—Å—å–∫–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ —Ä–æ–∑–≤–∏—Ç–∫—É',
  'Austrian Development Agency (ADA)': '–ê–≤—Å—Ç—Ä—ñ–π—Å—å–∫–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ —Ä–æ–∑–≤–∏—Ç–∫—É (ADA)',
  'Finnish Ministry for Foreign Affairs': '–ú—ñ–Ω—ñ—Å—Ç–µ—Ä—Å—Ç–≤–æ –∑–∞–∫–æ—Ä–¥–æ–Ω–Ω–∏—Ö —Å–ø—Ä–∞–≤ –§—ñ–Ω–ª—è–Ω–¥—ñ—ó',
  'Danish Embassy/Danish Government': '–ü–æ—Å–æ–ª—å—Å—Ç–≤–æ –î–∞–Ω—ñ—ó/–£—Ä—è–¥ –î–∞–Ω—ñ—ó',
  
  // Countries
  'Black Sea Region': '–ß–æ—Ä–Ω–æ–º–æ—Ä—Å—å–∫–∏–π —Ä–µ–≥—ñ–æ–Ω',
  'EU/International': '–Ñ–°/–ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏–π',
  'Ukraine/International': '–£–∫—Ä–∞—ó–Ω–∞/–ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏–π',
  'Poland/Ukraine': '–ü–æ–ª—å—â–∞/–£–∫—Ä–∞—ó–Ω–∞',
  'Netherlands/Ukraine': '–ù—ñ–¥–µ—Ä–ª–∞–Ω–¥–∏/–£–∫—Ä–∞—ó–Ω–∞',
  'France/Ukraine': '–§—Ä–∞–Ω—Ü—ñ—è/–£–∫—Ä–∞—ó–Ω–∞',
  'International': '–ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏–π',
  'Germany/Ukraine': '–ù—ñ–º–µ—á—á–∏–Ω–∞/–£–∫—Ä–∞—ó–Ω–∞',
  'USA/International': '–°–®–ê/–ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏–π',
  'Germany/International': '–ù—ñ–º–µ—á—á–∏–Ω–∞/–ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏–π',
  'Canada/Ukraine': '–ö–∞–Ω–∞–¥–∞/–£–∫—Ä–∞—ó–Ω–∞',
  'Japan/Ukraine': '–Ø–ø–æ–Ω—ñ—è/–£–∫—Ä–∞—ó–Ω–∞',
  'Norway/Ukraine': '–ù–æ—Ä–≤–µ–≥—ñ—è/–£–∫—Ä–∞—ó–Ω–∞',
  'Czech Republic/Ukraine': '–ß–µ—Ö—ñ—è/–£–∫—Ä–∞—ó–Ω–∞',
  'International/Ukraine': '–ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏–π/–£–∫—Ä–∞—ó–Ω–∞',
  'UN/Ukraine': '–û–û–ù/–£–∫—Ä–∞—ó–Ω–∞',
  'Belgium/Ukraine': '–ë–µ–ª—å–≥—ñ—è/–£–∫—Ä–∞—ó–Ω–∞',
  'Austria/Ukraine': '–ê–≤—Å—Ç—Ä—ñ—è/–£–∫—Ä–∞—ó–Ω–∞',
  'Finland/Ukraine': '–§—ñ–Ω–ª—è–Ω–¥—ñ—è/–£–∫—Ä–∞—ó–Ω–∞',
  'Denmark/Ukraine': '–î–∞–Ω—ñ—è/–£–∫—Ä–∞—ó–Ω–∞'
};

function translateText(text) {
  if (!text) return null;
  
  // Direct translation if available
  if (translations[text]) {
    return translations[text];
  }
  
  // Pattern-based translations for longer texts
  return text
    .replace(/Ukraine/g, '–£–∫—Ä–∞—ó–Ω–∞')
    .replace(/Ukrainian/g, '—É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π')
    .replace(/civil society/gi, '–≥—Ä–æ–º–∞–¥—è–Ω—Å—å–∫–µ —Å—É—Å–ø—ñ–ª—å—Å—Ç–≤–æ')
    .replace(/democracy/gi, '–¥–µ–º–æ–∫—Ä–∞—Ç—ñ—è')
    .replace(/human rights/gi, '–ø—Ä–∞–≤–∞ –ª—é–¥–∏–Ω–∏')
    .replace(/governance/gi, '—É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è')
    .replace(/transparency/gi, '–ø—Ä–æ–∑–æ—Ä—ñ—Å—Ç—å')
    .replace(/accountability/gi, '–ø—ñ–¥–∑–≤—ñ—Ç–Ω—ñ—Å—Ç—å')
    .replace(/capacity building/gi, '—Ä–æ–∑–±—É–¥–æ–≤–∞ –ø–æ—Ç–µ–Ω—Ü—ñ–∞–ª—É')
    .replace(/NGO/g, '–ù–ì–û')
    .replace(/grant/gi, '–≥—Ä–∞–Ω—Ç')
    .replace(/funding/gi, '—Ñ—ñ–Ω–∞–Ω—Å—É–≤–∞–Ω–Ω—è')
    .replace(/application/gi, '–∑–∞—è–≤–∫–∞')
    .replace(/deadline/gi, '—Ç–µ—Ä–º—ñ–Ω –ø–æ–¥–∞—á—ñ')
    .replace(/eligibility/gi, '–∫—Ä–∏—Ç–µ—Ä—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ')
    .replace(/requirements/gi, '–≤–∏–º–æ–≥–∏')
    .replace(/evaluation/gi, '–æ—Ü—ñ–Ω—é–≤–∞–Ω–Ω—è')
    .replace(/reporting/gi, '–∑–≤—ñ—Ç–Ω—ñ—Å—Ç—å')
    .replace(/duration/gi, '—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å');
}

async function translateGrants() {
  console.log('üá∫üá¶ Ukrainian Translation Agent 2 - Working Version');
  
  if (!process.env.SUPABASE_URL || !process.env.SUPABASE_SERVICE_ROLE_KEY) {
    console.error('‚ùå Missing Supabase environment variables');
    process.exit(1);
  }
  
  try {
    console.log('üîó Testing connection...');
    
    // Test connection first
    const { data: testData, error: testError } = await supabase
      .from('grants')
      .select('id')
      .limit(1);
      
    if (testError) {
      console.error('‚ùå Connection failed:', testError);
      return;
    }
    
    console.log('‚úÖ Connection successful');
    
    // Get grants that need translation (178-203)
    const grantIds = [178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203];
    
    console.log(`üìù Processing ${grantIds.length} grants for Ukrainian translation...`);
    
    let successCount = 0;
    let skippedCount = 0;
    let errorCount = 0;
    
    // Process each grant
    for (let i = 0; i < grantIds.length; i++) {
      const grantId = grantIds[i];
      
      try {
        console.log(`\n[${i + 1}/${grantIds.length}] Processing Grant ID ${grantId}...`);
        
        // Fetch the grant
        const { data: grant, error: fetchError } = await supabase
          .from('grants')
          .select('*')
          .eq('id', grantId)
          .single();
          
        if (fetchError || !grant) {
          console.log(`‚ö†Ô∏è Grant ${grantId} not found, skipping...`);
          errorCount++;
          continue;
        }
        
        // Check if already translated
        if (grant.grant_name_uk) {
          console.log(`‚è≠Ô∏è Grant ${grantId} already translated, skipping...`);
          skippedCount++;
          continue;
        }
        
        console.log(`üìã Grant: ${grant.grant_name}`);
        console.log(`üè¢ Org: ${grant.funding_organization}`);
        
        // Create Ukrainian translations
        const ukrainianData = {
          grant_name_uk: translateText(grant.grant_name),
          funding_organization_uk: translateText(grant.funding_organization),
          country_region_uk: translateText(grant.country_region),
          eligibility_criteria_uk: translateText(grant.eligibility_criteria),
          focus_areas_uk: translateText(grant.focus_areas),
          grant_amount_uk: translateText(grant.grant_amount),
          duration_uk: translateText(grant.duration),
          application_procedure_uk: translateText(grant.application_procedure),
          required_documents_uk: translateText(grant.required_documents),
          evaluation_criteria_uk: translateText(grant.evaluation_criteria),
          additional_requirements_uk: translateText(grant.additional_requirements),
          reporting_requirements_uk: translateText(grant.reporting_requirements),
          detailed_description_uk: translateText(grant.detailed_description)
        };
        
        console.log(`üîÑ Updating: ${ukrainianData.grant_name_uk}`);
        
        // Update the database
        const { error: updateError } = await supabase
          .from('grants')
          .update(ukrainianData)
          .eq('id', grantId);
          
        if (updateError) {
          console.error(`‚ùå Update failed for grant ${grantId}:`, updateError);
          errorCount++;
        } else {
          console.log(`‚úÖ Successfully updated grant ${grantId}`);
          successCount++;
        }
        
        // Short delay
        await new Promise(resolve => setTimeout(resolve, 300));
        
      } catch (error) {
        console.error(`‚ùå Error processing grant ${grantId}:`, error);
        errorCount++;
      }
    }
    
    console.log('\nüéØ Translation Summary:');
    console.log(`‚úÖ Successfully translated: ${successCount} grants`);
    console.log(`‚è≠Ô∏è Already translated: ${skippedCount} grants`);
    console.log(`‚ùå Errors: ${errorCount} grants`);
    console.log(`üìä Total processed: ${successCount + skippedCount + errorCount} grants`);
    
    // Verification
    console.log('\nüîç Verifying translations...');
    const { data: verifyData, error: verifyError } = await supabase
      .from('grants')
      .select('id, grant_name, grant_name_uk')
      .in('id', grantIds.slice(0, 5))
      .order('id');
      
    if (verifyError) {
      console.error('‚ùå Verification failed:', verifyError);
    } else {
      console.log('Sample verification:');
      verifyData.forEach(grant => {
        const status = grant.grant_name_uk ? '‚úÖ' : '‚ùå';
        console.log(`${status} ID ${grant.id}: Ukrainian translation ${grant.grant_name_uk ? 'present' : 'missing'}`);
      });
    }
    
    console.log('\nüéâ Ukrainian Translation Agent 2 completed successfully!');
    
  } catch (error) {
    console.error('‚ùå Fatal error:', error);
    process.exit(1);
  }
}

// Run if called directly
if (require.main === module) {
  translateGrants().then(() => {
    console.log('‚úÖ Translation script completed');
    process.exit(0);
  });
}

module.exports = { translateGrants };